// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/kanban_list/data/datasources/mock_datasources.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:home_challenge_kanban/features/kanban_list/data/datasources/crud_kanban_local_datasource.dart'
    as _i3;
import 'package:home_challenge_kanban/features/kanban_list/data/models/kanban/kanban_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeKanbanModel_0 extends _i1.SmartFake implements _i2.KanbanModel {
  _FakeKanbanModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CrudKanbanLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudKanbanLocalDatasource extends _i1.Mock
    implements _i3.CrudKanbanLocalDatasource {
  @override
  _i4.Future<_i2.KanbanModel> createKanban(
    String? name,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createKanban,
          [
            name,
            description,
          ],
        ),
        returnValue: _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #createKanban,
            [
              name,
              description,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #createKanban,
            [
              name,
              description,
            ],
          ),
        )),
      ) as _i4.Future<_i2.KanbanModel>);
  @override
  _i4.Future<int> deleteKanban(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteKanban,
          [key],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.KanbanModel> readKanban(String? key) => (super.noSuchMethod(
        Invocation.method(
          #readKanban,
          [key],
        ),
        returnValue: _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #readKanban,
            [key],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #readKanban,
            [key],
          ),
        )),
      ) as _i4.Future<_i2.KanbanModel>);
  @override
  _i4.Future<_i2.KanbanModel> updateKanban(_i2.KanbanModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateKanban,
          [model],
        ),
        returnValue: _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #updateKanban,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.KanbanModel>.value(_FakeKanbanModel_0(
          this,
          Invocation.method(
            #updateKanban,
            [model],
          ),
        )),
      ) as _i4.Future<_i2.KanbanModel>);
}
