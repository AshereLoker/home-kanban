// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/kanban_list/domain/usecases/crud_kanban_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i2;
import 'package:home_challenge_kanban/core/error/failures.dart' as _i5;
import 'package:home_challenge_kanban/features/kanban_list/data/models/kanban/kanban_model.dart'
    as _i7;
import 'package:home_challenge_kanban/features/kanban_list/domain/entities/kanban.dart'
    as _i6;
import 'package:home_challenge_kanban/features/kanban_list/domain/repositories/kanban_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CrudKanbanRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrudKanbanRepository extends _i1.Mock
    implements _i3.CrudKanbanRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>> createKanban(
    String? name,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createKanban,
          [
            name,
            description,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
            _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #createKanban,
            [
              name,
              description,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
                _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #createKanban,
            [
              name,
              description,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>> readKanban(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #readKanban,
          [key],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
            _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #readKanban,
            [key],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
                _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #readKanban,
            [key],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>> updateKanban(
          _i7.KanbanModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateKanban,
          [model],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
            _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #updateKanban,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>.value(
                _FakeEither_0<_i5.Failure, _i6.Kanban>(
          this,
          Invocation.method(
            #updateKanban,
            [model],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Kanban>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteKanban(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteKanban,
          [key],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #deleteKanban,
            [key],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, int>>.value(
                _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #deleteKanban,
            [key],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
