// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/kanban_list/domain/usecases/mock/mock_usecases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:either_dart/either.dart' as _i3;
import 'package:fast_immutable_collections/fast_immutable_collections.dart'
    as _i7;
import 'package:home_challenge_kanban/core/error/failures.dart' as _i6;
import 'package:home_challenge_kanban/core/usecases/usecase.dart' as _i11;
import 'package:home_challenge_kanban/features/kanban_list/domain/entities/kanban.dart'
    as _i8;
import 'package:home_challenge_kanban/features/kanban_list/domain/repositories/kanban_repository.dart'
    as _i2;
import 'package:home_challenge_kanban/features/kanban_list/domain/usecases/create_kanban.dart'
    as _i4;
import 'package:home_challenge_kanban/features/kanban_list/domain/usecases/delete_kanban.dart'
    as _i9;
import 'package:home_challenge_kanban/features/kanban_list/domain/usecases/read_all_kanbans.dart'
    as _i10;
import 'package:home_challenge_kanban/features/kanban_list/domain/usecases/update_kanban.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCrudKanbanRepository_0 extends _i1.SmartFake
    implements _i2.CrudKanbanRepository {
  _FakeCrudKanbanRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateKanban].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateKanban extends _i1.Mock implements _i4.CreateKanban {
  @override
  _i2.CrudKanbanRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudKanbanRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>> call(
          _i4.CreateKanbanParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>);
}

/// A class which mocks [DeleteKanban].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteKanban extends _i1.Mock implements _i9.DeleteKanban {
  @override
  _i2.CrudKanbanRepository get kanbanEntityRepository => (super.noSuchMethod(
        Invocation.getter(#kanbanEntityRepository),
        returnValue: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#kanbanEntityRepository),
        ),
        returnValueForMissingStub: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#kanbanEntityRepository),
        ),
      ) as _i2.CrudKanbanRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>> call(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [key],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [key],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [key],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>);
}

/// A class which mocks [ReadAllKanbans].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadAllKanbans extends _i1.Mock implements _i10.ReadAllKanbans {
  @override
  _i2.CrudKanbanRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudKanbanRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>> call(
          _i11.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>);
}

/// A class which mocks [UpdateKanban].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateKanban extends _i1.Mock implements _i12.UpdateKanban {
  @override
  _i2.CrudKanbanRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCrudKanbanRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CrudKanbanRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>> call(
          _i12.UpdateKanbanParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>.value(
                _FakeEither_1<_i6.Failure, _i7.IList<_i8.Kanban>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.IList<_i8.Kanban>>>);
}
