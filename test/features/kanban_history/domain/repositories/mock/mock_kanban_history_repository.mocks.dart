// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/kanban_history/domain/repositories/mock/mock_kanban_history_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i2;
import 'package:fast_immutable_collections/fast_immutable_collections.dart'
    as _i6;
import 'package:home_challenge_kanban/core/error/failures.dart' as _i5;
import 'package:home_challenge_kanban/features/kanban_history/domain/repositories/kanban_history_repository.dart'
    as _i3;
import 'package:home_challenge_kanban/features/kanban_history/domain/usecases/kanban_history_usecases.dart'
    as _i8;
import 'package:home_challenge_kanban/features/kanban_list/domain/entities/kanban.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KanbanHistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockKanbanHistoryRepository extends _i1.Mock
    implements _i3.KanbanHistoryRepository {
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, _i6.IList<_i7.Kanban>>> readAllFinished() =>
      (super.noSuchMethod(
        Invocation.method(
          #readAllFinished,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>.value(
                _FakeEither_0<_i5.Failure, _i6.IList<_i7.Kanban>>(
          this,
          Invocation.method(
            #readAllFinished,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>.value(
                _FakeEither_0<_i5.Failure, _i6.IList<_i7.Kanban>>(
          this,
          Invocation.method(
            #readAllFinished,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>);
  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>> readTimeRangeFinished(
          _i8.ReadTimeRangeFinishedParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #readTimeRangeFinished,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>.value(
                _FakeEither_0<_i5.Failure, _i6.IList<_i7.Kanban>>(
          this,
          Invocation.method(
            #readTimeRangeFinished,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>.value(
                _FakeEither_0<_i5.Failure, _i6.IList<_i7.Kanban>>(
          this,
          Invocation.method(
            #readTimeRangeFinished,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.IList<_i7.Kanban>>>);
}
