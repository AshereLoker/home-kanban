// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/timer/domain/usecases/mock/mock_timer_usecases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:either_dart/either.dart' as _i3;
import 'package:home_challenge_kanban/core/error/failures.dart' as _i6;
import 'package:home_challenge_kanban/core/usecases/usecase.dart' as _i7;
import 'package:home_challenge_kanban/features/timer/domain/repositories/timer_repository.dart'
    as _i2;
import 'package:home_challenge_kanban/features/timer/domain/usecases/pause_timer.dart'
    as _i4;
import 'package:home_challenge_kanban/features/timer/domain/usecases/start_timer.dart'
    as _i8;
import 'package:home_challenge_kanban/features/timer/domain/usecases/stop_timer.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimerRepository_0 extends _i1.SmartFake
    implements _i2.TimerRepository {
  _FakeTimerRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PauseTimer].
///
/// See the documentation for Mockito's code generation for more information.
class MockPauseTimer extends _i1.Mock implements _i4.PauseTimer {
  @override
  _i2.TimerRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimerRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, void>>.value(
                _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [StartTimer].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartTimer extends _i1.Mock implements _i8.StartTimer {
  @override
  _i2.TimerRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimerRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.ValueStream<int>>> call(
          _i8.StartTimerParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i9.ValueStream<int>>>.value(
                _FakeEither_1<_i6.Failure, _i9.ValueStream<int>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i9.ValueStream<int>>>.value(
                _FakeEither_1<_i6.Failure, _i9.ValueStream<int>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.ValueStream<int>>>);
}

/// A class which mocks [StopTimer].
///
/// See the documentation for Mockito's code generation for more information.
class MockStopTimer extends _i1.Mock implements _i10.StopTimer {
  @override
  _i2.TimerRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTimerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimerRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, void>>.value(
                _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
