// Mocks generated by Mockito 5.3.2 from annotations
// in home_challenge_kanban/test/features/export_kanban/domain/repository/mock/mock_export_kanban_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i2;
import 'package:home_challenge_kanban/core/error/failures.dart' as _i5;
import 'package:home_challenge_kanban/features/export_kanban/domain/repositories/export_kanban_repository.dart'
    as _i3;
import 'package:home_challenge_kanban/features/export_kanban/domain/usecases/export_kanban_usecases.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExportKanbanRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExportKanbanRepository extends _i1.Mock
    implements _i3.ExportKanbanRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> exportSingleKanban(
          _i6.ExportSingleKanbanParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportSingleKanban,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #exportSingleKanban,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #exportSingleKanban,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> exportMultipleKanbans(
          _i6.ExportMultipleKanbansParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportMultipleKanbans,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #exportMultipleKanbans,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #exportMultipleKanbans,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
